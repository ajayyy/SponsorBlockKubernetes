apiVersion: pg.percona.com/v1
kind: PerconaPGCluster
metadata:
  labels:
    pgo-version: 1.3.0
  name: cluster3
spec:
#  secretsName: cluster2-users
#  sslCA: cluster2-ssl-ca
#  sslSecretName: cluster2-ssl-keypair
#  sslReplicationSecretName: cluster2-ssl-keypair
  upgradeOptions:
    versionServiceEndpoint: https://check.percona.com
    apply: 14-recommended
    schedule: "0 4 * * *"
  database: pgdb
  port: "5432"
  user: pguser
  disableAutofail: false
  tlsOnly: false
  standby: false
  pause: false
  keepData: true
  keepBackups: true
  # pgDataSource: # Does not work
  #   restoreFrom: "cluster1"
  #   restoreOpts: ""
#  tablespaceStorages:
#    lake:
#      volumeSpec:
#        size: 1G
#        accessmode: ReadWriteOnce
#        storagetype: dynamic
#        storageclass: ""
#        matchLabels: ""
#  walStorage:
#    volumeSpec:
#      size: 1G
#      accessmode: ReadWriteOnce
#      storagetype: dynamic
#      storageclass: ""
#      matchLabels: ""
#  userLabels:
#    pgo-version: "1.3.0"
  pgPrimary:
    image: perconalab/percona-postgresql-operator:main-ppg14-postgres-ha
#    imagePullPolicy: Always
    customconfig: "cluster1-custom-config"
    resources:
      requests:
        cpu: 500m
        memory: "256Mi"
#      limits:
#        cpu: 500m
#        memory: "256Mi"
    affinity:
      antiAffinityType: preferred
      # custom affinity is not allowed at the moment
      # workaround is to manually add it with kubectl edit deployments.apps cluster2
      # nodeAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #     nodeSelectorTerms:
      #     - matchExpressions:
      #       - key: dbsize
      #         operator: In
      #         values:
      #         - "true"
        # podAntiAffinity:
        #   preferredDuringSchedulingIgnoredDuringExecution:
        #   - weight: 1
        #     podAffinityTerm:
        #       topologyKey: kubernetes.io/hostname
        #       labelSelector:
        #         matchLabels:
        #           postgres-operator.crunchydata.com/cluster: pgsb
        #           postgres-operator.crunchydata.com/instance-set: instance1
    tolerations: []
    volumeSpec:
      size: 200G
      accessmode: ReadWriteOnce
      storagetype: dynamic
      storageclass: ""
#      matchLabels: ""
    expose:
      serviceType: ClusterIP
#      loadBalancerSourceRanges:
#      annotations:
#        pg-cluster-annot: cluster2
#      labels:
#        pg-cluster-label: cluster2
#    customconfig: ""
  pmm:
    enabled: false
    image: percona/pmm-client:2.26.0
#    imagePullPolicy: Always
    serverHost: monitoring-service
    serverUser: admin
    pmmSecret: cluster1-pmm-secret
    resources:
      requests:
        memory: 200M
        cpu: 500m
#      limits:
#        cpu: "1"
#        memory: "400M"
  backup:
    image: perconalab/percona-postgresql-operator:main-ppg14-pgbackrest
#    imagePullPolicy: Always
    backrestRepoImage: perconalab/percona-postgresql-operator:main-ppg14-pgbackrest-repo
    resources:
      requests:
        cpu: "200m"
        memory: "48Mi"
#      limits:
#        cpu: "1"
#        memory: "64Mi"
#    affinity:
#      antiAffinityType: preferred
    volumeSpec:
      size: 200G
      accessmode: ReadWriteOnce
      storagetype: dynamic
      storageclass: ""
#      matchLabels: ""
    storages:
      repo1:
        type: s3
        bucket: "sponsorblock-postgres2"
        endpointUrl: "s3.us-west-002.backblazeb2.com"
        region: "us-west-002"
    repoPath: "/backrestrepo/cluster1-backrest-shared-repo"
    schedule:
      - name: "full-backup"
        schedule: "0 1 * * 0"
        keep: 2
        type: full
        storage: repo1
      - name: "incremental-backup"
        schedule: "*/20 * * * *"
        keep: 1024
        type: incr
        storage: repo1
  pgBouncer: # required, or else replicas won't be created
    image: perconalab/percona-postgresql-operator:main-ppg14-pgbouncer
#    imagePullPolicy: Always
    size: 1
    resources:
      requests:
        cpu: "1"
        memory: "128Mi"
#      limits:
#        cpu: "2"
#        memory: "512Mi"
#    affinity:
#      antiAffinityType: preferred
    expose:
      serviceType: ClusterIP
    #  loadBalancerSourceRanges:
    #  annotations:
    #    pg-cluster-annot: cluster2
    #  labels:
    #    pg-cluster-label: cluster2
  pgReplicas:
    hotStandby: # a generic name, can be more than one
      size: 2
      # resources:
      #   requests:
      #     cpu: "500m"
      #     memory: "256Mi"
#        limits:
#          cpu: "500m"
#          memory: "256Mi"
      volumeSpec:
        accessmode: ReadWriteOnce
        size: 200G
        storagetype: dynamic
        storageclass: ""
#        matchLabels: ""
#      labels:
#        pg-cluster-label: cluster2
#      annotations:
#        pg-cluster-annot: cluster2-1
      enableSyncStandby: false
      expose:
        serviceType: ClusterIP
#        loadBalancerSourceRanges:
#        annotations:
#          pg-cluster-annot: cluster2
#        labels:
#          pg-cluster-label: cluster2
      affinity:
        antiAffinityType: preferred
        # custom affinity is not allowed at the moment
        # nodeAffinity:
        #     requiredDuringSchedulingIgnoredDuringExecution:
        #       nodeSelectorTerms:
        #       - matchExpressions:
        #         - key: dbsize
        #           operator: In
        #           values:
        #           - "true"
          # podAntiAffinity:
          #   preferredDuringSchedulingIgnoredDuringExecution:
          #   - weight: 1
          #     podAffinityTerm:
          #       topologyKey: kubernetes.io/hostname
          #       labelSelector:
          #         matchLabels:
          #           postgres-operator.crunchydata.com/cluster: pgsb
          #           postgres-operator.crunchydata.com/instance-set: instance1
  pgBadger:
    enabled: false
    image: perconalab/percona-postgresql-operator:main-ppg14-pgbadger
#    imagePullPolicy: Always
    port: 10000
#  securityContext:
#    fsGroup: 1001
#    supplementalGroups: [1001, 1002, 1003]
